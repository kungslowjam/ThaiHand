#!/bin/bash

# Script р╕кр╕│р╕лр╕гр╕▒р╕Ъ Deploy р╣Бр╕ер╕░ Restart Services р╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╣Бр╕Бр╣Йр╣Др╕В Line Login
# Usage: ./deploy-line-login.sh

set -e

echo "ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Бр╕▓р╕г Deploy Line Login р╣Гр╕лр╕бр╣И..."

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕нр╕вр╕╣р╣Ир╣Гр╕Щ directory р╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
if [ ! -f "docker-compose.yml" ]; then
    echo "тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣М docker-compose.yml р╕Бр╕гр╕╕р╕Ур╕▓р╣Др╕Ыр╕Чр╕╡р╣И root directory р╕Вр╕нр╕Зр╣Вр╕Ыр╕гр╣Ар╕Ир╕Д"
    exit 1
fi

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ environment variables
echo "ЁЯУЛ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Environment Variables..."

required_vars=(
    "LINE_CLIENT_ID"
    "LINE_CLIENT_SECRET"
    "NEXTAUTH_SECRET"
    "GOOGLE_CLIENT_ID"
    "GOOGLE_CLIENT_SECRET"
)

missing_vars=()
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        missing_vars+=("$var")
    fi
done

if [ ${#missing_vars[@]} -ne 0 ]; then
    echo "тЭМ Environment Variables р╕Чр╕╡р╣Ир╕Вр╕▓р╕Фр╕лр╕▓р╕вр╣Др╕Ы:"
    for var in "${missing_vars[@]}"; do
        echo "   - $var"
    done
    echo "р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ Environment Variables р╣Гр╕Щр╣Др╕Яр╕ер╣М .env"
    exit 1
fi

echo "тЬЕ Environment Variables р╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щ"

# Stop services р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
echo "ЁЯЫС р╕лр╕вр╕╕р╕Ф Services р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ..."
docker-compose down

# Build images р╣Гр╕лр╕бр╣И
echo "ЁЯФи Build Images р╣Гр╕лр╕бр╣И..."
docker-compose build --no-cache

# Start services
echo "ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Services..."
docker-compose up -d

# р╕гр╕нр╣Гр╕лр╣Й services р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ
echo "тП│ р╕гр╕нр╣Гр╕лр╣Й Services р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ..."
sleep 30

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ health р╕Вр╕нр╕З services
echo "ЁЯПе р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Health р╕Вр╕нр╕З Services..."

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ frontend
echo "р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Frontend..."
if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
    echo "тЬЕ Frontend р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
else
    echo "тЭМ Frontend р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓"
    docker-compose logs frontend
fi

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ backend
echo "р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Backend..."
if curl -f http://localhost:8000/health > /dev/null 2>&1; then
    echo "тЬЕ Backend р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
else
    echo "тЭМ Backend р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓"
    docker-compose logs backend
fi

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ database
echo "р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Database..."
if docker-compose exec postgres pg_isready -U thaihand_user -d thaihand_db > /dev/null 2>&1; then
    echo "тЬЕ Database р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
else
    echo "тЭМ Database р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓"
    docker-compose logs postgres
fi

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ nginx
echo "р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Nginx..."
if curl -f http://localhost > /dev/null 2>&1; then
    echo "тЬЕ Nginx р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
else
    echo "тЭМ Nginx р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓"
    docker-compose logs nginx
fi

# р╣Бр╕кр╕Фр╕З status р╕Вр╕нр╕З services
echo "ЁЯУК Status р╕Вр╕нр╕З Services:"
docker-compose ps

# р╣Бр╕кр╕Фр╕З logs р╕Вр╕нр╕З services
echo "ЁЯУЭ Logs р╕Вр╕нр╕З Services:"
echo "Frontend Logs:"
docker-compose logs --tail=20 frontend

echo ""
echo "Backend Logs:"
docker-compose logs --tail=20 backend

echo ""
echo "Database Logs:"
docker-compose logs --tail=10 postgres

echo ""
echo "Nginx Logs:"
docker-compose logs --tail=10 nginx

# р╕Чр╕Фр╕кр╕нр╕Ъ Line Login
echo "ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ъ Line Login..."
echo "р╣Др╕Ыр╕Чр╕╡р╣И http://localhost:3000/login р╣Ар╕Юр╕╖р╣Ир╕нр╕Чр╕Фр╕кр╕нр╕Ъ Line Login"

# р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓
echo ""
echo "ЁЯУЛ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓:"
echo "Frontend URL: http://localhost:3000"
echo "Backend URL: http://localhost:8000"
echo "Database: localhost:5432"
echo "Nginx: http://localhost"

echo ""
echo "ЁЯОЙ р╕Бр╕▓р╕г Deploy р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!"
echo "р╕лр╕▓р╕Бр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓ р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ logs р╕Фр╣Йр╕▓р╕Щр╕Ър╕Щ" 