name: Security & Quality Checks

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Run weekly on Monday at 2 AM

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'thaihand-frontend:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security linter for Python
      uses: python-security/bandit-action@v1.0.0
      with:
        path: ./backend
        level: medium
        confidence: medium

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run npm audit
      working-directory: ./frontend
      run: npm audit --audit-level=moderate
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety
    
    - name: Run safety check for Python dependencies
      working-directory: ./backend
      run: safety check --json --output safety-report.json || true
    
    - name: Upload safety report
      uses: actions/upload-artifact@v4
      with:
        name: safety-report
        path: backend/safety-report.json

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint --if-present
    
    - name: Run Prettier check
      working-directory: ./frontend
      run: npx prettier --check . || true
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort mypy
    
    - name: Run Black code formatter check
      working-directory: ./backend
      run: black --check --diff . || true
    
    - name: Run isort import sorter check
      working-directory: ./backend
      run: isort --check-only --diff . || true
    
    - name: Run MyPy type checker
      working-directory: ./backend
      run: mypy . --ignore-missing-imports || true

  container-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker images
      run: |
        docker build -t thaihand-frontend:test ./frontend
        docker build -t thaihand-backend:test ./backend
    
    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'thaihand-frontend:test'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    
    - name: Run Trivy container scan for backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'thaihand-backend:test'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  notify-security:
    needs: [security-scan, dependency-check, code-quality, container-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify security scan results
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#security-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
