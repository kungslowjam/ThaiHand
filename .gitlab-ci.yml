stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Cache dependencies
cache:
  paths:
    - frontend/node_modules/
    - backend/__pycache__/

# Test stage
test:
  stage: test
  image: node:18-alpine
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm run lint
    - npm run type-check
  only:
    - merge_requests
    - main

# Build stage
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Build backend image
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA ./backend
    - docker build -t $CI_REGISTRY_IMAGE/backend:latest ./backend
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/backend:latest
    
    # Build frontend image
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA ./frontend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:latest ./frontend
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
  only:
    - main

# Deploy to Digital Ocean
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $SSH_USER@$SSH_HOST << 'EOF'
      # Navigate to project directory
      cd /opt/thaihand
      
      # Pull latest images
      docker pull $CI_REGISTRY_IMAGE/backend:latest
      docker pull $CI_REGISTRY_IMAGE/frontend:latest
      
      # Stop and remove old containers
      docker-compose down
      
      # Update docker-compose.yml with new image tags
      sed -i "s|image: .*/backend.*|image: $CI_REGISTRY_IMAGE/backend:latest|g" docker-compose.yml
      sed -i "s|image: .*/frontend.*|image: $CI_REGISTRY_IMAGE/frontend:latest|g" docker-compose.yml
      
      # Start new containers
      docker-compose up -d
      
      # Run database migrations
      docker-compose exec -T backend alembic upgrade head
      
      # Health check
      sleep 30
      curl -f http://localhost/health || exit 1
      
      # Clean up old images
      docker image prune -f
    EOF
  environment:
    name: production
    url: https://thaihand.shop
  only:
    - main
  when: manual
